(require '[clojure.java.jdbc :as j])
;Setting Up A Data Source
(def mysql-db {:classname   "com.mysql.jdbc.Driver"
               :subprotocol "mysql"
               :subname     "//10.4.7.15:3306/clojure_test"
               :user        "root"
               :password    "csst"})
(j/insert! mysql-db :fruit
           {:name "Apple" :appearance "rosy" :cost 24}
           {:name "Orange" :appearance "round" :cost 49})
(def d (dalay (println "Running...")))
(def d (delay (println "Running...")))
(defref d)
(deref d)
(def my-delay (delay (println "did some work") 100))
(realized? my-delay)
@my-delay
(realized? my-delay)
@my-delay
@d
(def d (delay (println "Running...") :done!))
(deref d)
@d
(defn get-document
  [id]
  {:url "http://www.baidu.com"
   :title "百度一下，你就知道"
   :mime "text/html"
   :content (delay (slurp "http://www.baidu.com"))})
(def d (get-document "some-id"))
d
(realized? (:content d))
@(:content d)
(realized? (:content d))
(def long-calculation (future (apply + (range 1e8))))
@long-calculation
@(future (Thread/sleep 5000) :done)
exit
(deref (future (Thread/sleep 5000) :done!)
       1000
       :impatitent!)
(defn get-document
  [id]
  {:url "http://www.baidu.com"
   :title "百度一下，你就知道"
   :mime "text/html"
   :content (future (slurp "http://www.baidu.com"))})
(def d (get-document "some-id"))
d
(def f (future (Thread/sleep 10000) (println "done") 100))
@f
(def f (future (inc 1)))
(future? f) 
(future? 9) 
(def v (delay (println "starting...")
              (Thread/sleep 5000)
              10))
(delay? v)
@v
(def p (promise))
(realized? p)
(deliver p 42)
(realized? p)
@p
(def a (promise))
(def b (promise))
(def c (promise))
(future
  (deliver c (+ @a @b))
  (println "Delivery complete"))
(realized? c)
(deliver a 10)
(realized? c)
(deliver b 10)
(realized? c)
@c
(def p2 (promise))
(deref p2 3000 :ignore)
(slurp "project.cli")~
(slurp "project.cli")
(slurp "slurp.cli")
(slurp ~/dev/lein)
(slurp "~/dev/lein")
(slurp "dev/lein")
(slurp "/home/edgar/dev/lein")
(slurp "http://www.baidu.com")
(slurp "http://www.baidu.com" :encoding "UTF-8")
(re-seq #"\d" "clojure.1.6.0")
(req-seq #"\w+" "mary had a little lamb")
(re-seq #"\w+" "mary had a little lamb")
(defn phone-number
  "利用正则表达式从一个字符串中抽取除其中包含的电话号码"
  [string]
  (re-seq #"(\d{3)[\.-]?(\d{3})[\.-]?(\d{4})" string))
(defn phone-number
  "利用正则表达式从一个字符串中抽取除其中包含的电话号码"
  [string]
  (re-seq #"(\d{3})[\.-]?(\d{3})[\.-]?(\d{4})" string))
(doc phone-number)
(defn phone-numbers
  "利用正则表达式从一个字符串中抽取除其中包含的电话号码"
  [string]
  (re-seq #"(\d{3})[\.-]?(\d{3})[\.-]?(\d{4})" string))
(phone-numbers " Sunil:617.555.2937, Betty: 508.555.2218")
(re-seq #"(\S+):(\d+)" " RX pkts:18 err:5 drop:48")
(take 5 (repeat "x"))
(repeat 5 "x")
(concat [1 2] [3 4])
(concat [:a :b] nil [1 [2 3] 4])
(concat "abc" "def")
(time (dorun (map phone-numbers files)))
(def files (repeat 100
                   (apply str
                          (concat (repeat 1000000 \space)
                                  "Sunil:617.555.2937, Betty: 508.555.2218"))))
(time (dorun (map phone-numbers files)))
(time (dorun (pmap phone-numbers files)))
(def files (repeat 100000
                   (apply str
                          (concat (repeat 1000 space)
                                  "Sunil:617.555.2937, Betty: 508.555.2218"))))
(def files (repeat 100000
                   (apply str
                          (concat (repeat 1000 \space)
                                  "Sunil:617.555.2937, Betty: 508.555.2218"))))
(time (dorun (map phone-numbers files)))
(time (dorun (pmap phone-numbers files)))
(pmap inc [1 2 3 4 5])
(time (dorun (map long-running-job (range 4))))
(defn long-running-job [n]
  (Thread/sleep 3000)
  (+ n 10))
(time (dorun (map long-running-job (range 4))))
(time (dorun (pmap long-running-job (range 4))))
(time (doall (pmap long-running-job (range 4))))
exit
(def sarah (atom {:name "Sarah" :age 25 :wears-glasses? false}))
(swap! sarah update-in [:age] + 3)
(swap! sarah (comp #(update-in % [:age] inc)
                   #(assoc % :wears-glasses? true)))
;接受表达式作为参数，返回n个future
(defmacro futures
  [n & exprs]
  (vec (for [_ (range n)
             expr exprs]
         `(future ~expr))))
;wait-futures，始终返回nil并且阻塞REPL直到所有的future都实例化
(defmacro wait-futures
  [& args]
  `(doseq [f# (futures ~@args)]
     @f#))
(def xs (atom #{1 2 3}))
(wait-futures 1 (swap! xs (fn [v]
                            (Thread/sleep 250)
                            (println "trying 4")
                            (conj v 4)))
              (swap! xs (fn [v]
                          (Thread/sleep 500)
                          (println "trying 5")
                          (conj v 5))))
@xs
(def x (atom 2000))
(swap! x #(Thread/sleep %))
(compare-and-set! xs :wrong "new value")
(compare-and-set! xs @xs "new value")
@xs
(def xs (atom #{1 2}))
(compare-and-set! xs #{1 2} "new value")
(def my-atom (atom 0))
@my-atom
(swap! my-atom inc)
@my-atom
(swap! my-atom (fn [n] (* (+ n n) 2)))
exit
(defn echo-watch
  [key identity old new]
  (println key old "=>" new))
(def sarah (atom {:name "Sarah" :age 25}))
(add-watch sarah :echo echo-watch)
(swap! sarah update-in [:age] inc)
(add-watch sarah :echo2 echo-watch)
(swap! sarah update-in [:age] inc)
(remove-watch sarah :echo2)
(swap! sarah update-in [:age] inc)
(reset! sarah @sarah)
(def x (atom 10))
@x
(reset! x 20)
@x
exit 
(def history (atom ()))
(defn log->list
  [dest-atom key source old new]
  (when (not= old new)
    (swap! dest-atom conj new)))
(def sarah (atom {:name "Sarah" :age 25}))
(add-watch sarah :record (partial log->list history))
(swap! sarah update-in [:age] inc)
(swap! sarah identity)
(swap! sarah assoc :wears-glasses? true)
(pprint history)
(swap! sarah update-in [:age] inc)
(pprint history)
(pprint @history)
(identity 4)
(filter identity [1 2 3 nil 4 false true 1234])
(def n (atom 1 :validator pos?))
(swap! n + 500)
(swap! n - 1000)
(pos? 1)
(pos? 0)
(pos? -1)
(def sarah (atom {:name "Sarah" :age 25}))
(set-validator! sarah :age)
(swap! sarah dissoc :age)
(set-validator! sarah #(or (:age %)
                           (throw (IllegalStateException. "People must have ':age'"))))
(swap! sarah dissoc :age)
exit
(require '[clojure.core.async :as async :refer :all])
(def c (chan 1))
(go-loop [data (<! c)]
         (println "Waited for ==> " data)
         (println "No recur. Won't print again"))
(put! c "Example Async Data")
(go-loop []
         (let [data (<! c)]
         (println "Waited for ==> " data))
         (recur))
(put! c "Example Async Data")
(let [c (chan 1 (filter pos?))]
 
         (go-loop []
           (let [nums (<! c)]
             (println nums))
           (recur))
   
         (doseq [n (range -10 10)]
           (put! c n)))
(let [c (chan 1 (filter pos?))]
 
         (go-loop []
           (let [nums (<! c)]
             (println nums))
           (recur))
   
         (doseq [n (range -10 10)]
           (put! c n)))
(>!! c "Blocking - not in go-block")
(<!! c)
(def c (chan 1))
(>!! c "Blocking - not in go-block")
(<!! c)
(let [c (chan 1)]
  (go (>! c 1)
      (println "Got => " (<! c))))
(def c (chan 1))
(take! c
       (fn [x]
         (println "Clojure callback value " x)))
(put! c "XYZ")
exit
