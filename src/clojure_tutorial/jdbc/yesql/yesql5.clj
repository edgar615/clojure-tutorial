(ns clojure-tutorial.jdbc.yesql.yesql)

(require '[yesql.core :refer [defquery]])
(require '[clojure.java.jdbc :as j])

(def mysql-db {:classname   "com.mysql.jdbc.Driver"
               :subprotocol "mysql"
               :subname     "//10.4.7.15:3306/clojure_test"
               :user        "root"
               :password    "csst"})

(defquery fruit-by-name "clojure_tutorial/jdbc/yesql/where/fruit_by_name.sql"
          {:connection mysql-db})


(fruit-by-name {:name "Apple"})
;;({:count 5})
; Use it in a clojure.java.jdbc transaction.
(j/with-db-transaction [conn mysql-db]
                       {:apple (fruit-by-name {:name "Apple"} {:connection conn})
                        :Orange (fruit-by-name {:name "Orange"} {:connection conn})})

;One File, Many Queries
;As an alternative to the above, you can have many SQL statements in a single SQL file. The file format is: (<name tag> [docstring comments] <the query>)*,
(require '[yesql.core :refer [defqueries]])

(defqueries "clojure_tutorial/jdbc/yesql/where/queryfile.sql"
            {:connection mysql-db})


(fruit-by-name {:name "Apple"})
;;({:count 5})
; Use it in a clojure.java.jdbc transaction.
(j/with-db-transaction [conn mysql-db]
                       {:apple (fruit-by-name {:name "Apple"} {:connection conn})
                        :Orange (fruit-by-name {:name "Orange"} {:connection conn})})

;? Parameters
;Yesql supports named parameters, and ?-style positional parameters. Here's an example:
(fruit-cost {:? ["Orange" "Apple"]
             :min_cost 30})

;IN-list Queries
(find-fruits {:id [400 401 402 403 404 404]
                       :min_cost 30})

;Insert/Update/Delete and More
;To do INSERT/UPDATE/DELETE statements, you just need to add an ! to the end of the function name, and Yesql will execute the function appropriately.
(save-fruit! {:cost 110
              :id 404})

;Insert, Returning Autogenerated Keys
;There's one more variant: when you want to insert data and get back a database-generated primary key, the driver requires a special call, so Yesql needs to be specially-informed. You can do an "insert returning autogenerated key" with the <! suffix, like so:
(create-fruit<! {:name "Banana"})
;;{:generated_key 408}


;Row And Result Processors
(fruit-by-name {:name "Apple"} {:row-fn println})